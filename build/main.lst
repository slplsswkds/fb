                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _eeprom_write
                                     13 	.globl _smart_decrement
                                     14 	.globl _smart_increment
                                     15 	.globl _write_color_to_registers
                                     16 	.globl _tim2_init
                                     17 	.globl _gpio_init
                                     18 	.globl _clk_init
                                     19 	.globl _button_hundler
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DATA
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
                                     28 ;--------------------------------------------------------
                                     29 ; Stack segment in internal ram
                                     30 ;--------------------------------------------------------
                                     31 	.area	SSEG
      000000                         32 __start__stack:
      000000                         33 	.ds	1
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area DABS (ABS)
                                     39 
                                     40 ; default segment ordering for linker
                                     41 	.area HOME
                                     42 	.area GSINIT
                                     43 	.area GSFINAL
                                     44 	.area CONST
                                     45 	.area INITIALIZER
                                     46 	.area CODE
                                     47 
                                     48 ;--------------------------------------------------------
                                     49 ; interrupt vector
                                     50 ;--------------------------------------------------------
                                     51 	.area HOME
      000000                         52 __interrupt_vect:
      000000 82v00u00u00             53 	int s_GSINIT ; reset
                                     54 ;--------------------------------------------------------
                                     55 ; global & static initialisations
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
                                     58 	.area GSINIT
                                     59 	.area GSFINAL
                                     60 	.area GSINIT
      000000                         61 __sdcc_init_data:
                                     62 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   63 	ldw x, #l_DATA
      000003 27 07            [ 1]   64 	jreq	00002$
      000005                         65 00001$:
      000005 72 4FuFFuFF      [ 1]   66 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   67 	decw x
      00000A 26 F9            [ 1]   68 	jrne	00001$
      00000C                         69 00002$:
      00000C AEr00r00         [ 2]   70 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   71 	jreq	00004$
      000011                         72 00003$:
      000011 D6uFFuFF         [ 1]   73 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   74 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   75 	decw	x
      000018 26 F7            [ 1]   76 	jrne	00003$
      00001A                         77 00004$:
                                     78 ; stm8_genXINIT() end
                                     79 	.area GSFINAL
      000000 CCr00r04         [ 2]   80 	jp	__sdcc_program_startup
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME
                                     85 	.area HOME
      000004                         86 __sdcc_program_startup:
      000004 CCr00r08         [ 2]   87 	jp	_main
                                     88 ;	return from main will return to caller
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CODE
                                     93 ;	main.c: 19: static void delay(uint16_t t) {
                                     94 ;	-----------------------------------------
                                     95 ;	 function delay
                                     96 ;	-----------------------------------------
      000000                         97 _delay:
                                     98 ;	main.c: 20: while(t--) {};
      000000                         99 00101$:
      000000 90 93            [ 1]  100 	ldw	y, x
      000002 5A               [ 2]  101 	decw	x
      000003 90 5D            [ 2]  102 	tnzw	y
      000005 26 F9            [ 1]  103 	jrne	00101$
                                    104 ;	main.c: 21: }
      000007 81               [ 4]  105 	ret
                                    106 ;	main.c: 23: int main() {
                                    107 ;	-----------------------------------------
                                    108 ;	 function main
                                    109 ;	-----------------------------------------
      000008                        110 _main:
      000008 52 03            [ 2]  111 	sub	sp, #3
                                    112 ;	main.c: 24: __asm sim __endasm; // Disable interrupts
      00000A 9B               [ 1]  113 	sim	
                                    114 ;	main.c: 26: clk_init();
      00000B CDr00r00         [ 4]  115 	call	_clk_init
                                    116 ;	main.c: 27: gpio_init();
      00000E CDr00r00         [ 4]  117 	call	_gpio_init
                                    118 ;	main.c: 28: tim2_init();
      000011 CDr00r00         [ 4]  119 	call	_tim2_init
                                    120 ;	main.c: 30: __asm rim __endasm; // Enable interrupts
      000014 9A               [ 1]  121 	rim	
                                    122 ;	main.c: 32: eeprom_write(1, 0xCC);
      000015 A6 CC            [ 1]  123 	ld	a, #0xcc
      000017 5F               [ 1]  124 	clrw	x
      000018 5C               [ 1]  125 	incw	x
      000019 CDr00r00         [ 4]  126 	call	_eeprom_write
                                    127 ;	main.c: 35: rgb.r = 0;
      00001C 0F 01            [ 1]  128 	clr	(0x01, sp)
                                    129 ;	main.c: 36: rgb.g = 0;
      00001E 0F 02            [ 1]  130 	clr	(0x02, sp)
                                    131 ;	main.c: 37: rgb.b = 0;
      000020 0F 03            [ 1]  132 	clr	(0x03, sp)
      000022                        133 00102$:
                                    134 ;	main.c: 40: button_hundler(&rgb);
      000022 96               [ 1]  135 	ldw	x, sp
      000023 5C               [ 1]  136 	incw	x
      000024 CDr00r31         [ 4]  137 	call	_button_hundler
                                    138 ;	main.c: 41: write_color_to_registers(&rgb);
      000027 96               [ 1]  139 	ldw	x, sp
      000028 5C               [ 1]  140 	incw	x
      000029 CDr00r00         [ 4]  141 	call	_write_color_to_registers
      00002C 20 F4            [ 2]  142 	jra	00102$
                                    143 ;	main.c: 43: }
      00002E 5B 03            [ 2]  144 	addw	sp, #3
      000030 81               [ 4]  145 	ret
                                    146 ;	main.c: 45: void button_hundler(struct Color *color) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function button_hundler
                                    149 ;	-----------------------------------------
      000031                        150 _button_hundler:
      000031 52 04            [ 2]  151 	sub	sp, #4
      000033 1F 03            [ 2]  152 	ldw	(0x03, sp), x
                                    153 ;	main.c: 46: if((1 << 2) == (~PD_IDR & (1 << 2))) { // But_R+
      000035 C6 50 10         [ 1]  154 	ld	a, 0x5010
      000038 5F               [ 1]  155 	clrw	x
      000039 97               [ 1]  156 	ld	xl, a
      00003A 53               [ 2]  157 	cplw	x
      00003B 9F               [ 1]  158 	ld	a, xl
      00003C A4 04            [ 1]  159 	and	a, #0x04
      00003E 97               [ 1]  160 	ld	xl, a
      00003F 4F               [ 1]  161 	clr	a
      000040 95               [ 1]  162 	ld	xh, a
      000041 A3 00 04         [ 2]  163 	cpw	x, #0x0004
      000044 26 05            [ 1]  164 	jrne	00102$
                                    165 ;	main.c: 47: smart_increment(&color->r);
      000046 1E 03            [ 2]  166 	ldw	x, (0x03, sp)
      000048 CDr00r00         [ 4]  167 	call	_smart_increment
      00004B                        168 00102$:
                                    169 ;	main.c: 50: if((1 << 7) == (~PC_IDR & (1 << 7))) { // But_R-
      00004B C6 50 0B         [ 1]  170 	ld	a, 0x500b
      00004E 5F               [ 1]  171 	clrw	x
      00004F 97               [ 1]  172 	ld	xl, a
      000050 53               [ 2]  173 	cplw	x
      000051 9F               [ 1]  174 	ld	a, xl
      000052 A4 80            [ 1]  175 	and	a, #0x80
      000054 97               [ 1]  176 	ld	xl, a
      000055 4F               [ 1]  177 	clr	a
      000056 95               [ 1]  178 	ld	xh, a
      000057 A3 00 80         [ 2]  179 	cpw	x, #0x0080
      00005A 26 05            [ 1]  180 	jrne	00104$
                                    181 ;	main.c: 51: smart_decrement(&color->r);
      00005C 1E 03            [ 2]  182 	ldw	x, (0x03, sp)
      00005E CDr00r00         [ 4]  183 	call	_smart_decrement
      000061                        184 00104$:
                                    185 ;	main.c: 54: if((1 << 6) == (~PC_IDR & (1 << 6))) { // But_G+
      000061 C6 50 0B         [ 1]  186 	ld	a, 0x500b
      000064 5F               [ 1]  187 	clrw	x
      000065 97               [ 1]  188 	ld	xl, a
      000066 53               [ 2]  189 	cplw	x
      000067 9F               [ 1]  190 	ld	a, xl
      000068 A4 40            [ 1]  191 	and	a, #0x40
      00006A 97               [ 1]  192 	ld	xl, a
      00006B 4F               [ 1]  193 	clr	a
                                    194 ;	main.c: 55: smart_increment(&color->g);
      00006C 16 03            [ 2]  195 	ldw	y, (0x03, sp)
      00006E 90 5C            [ 1]  196 	incw	y
      000070 17 01            [ 2]  197 	ldw	(0x01, sp), y
                                    198 ;	main.c: 54: if((1 << 6) == (~PC_IDR & (1 << 6))) { // But_G+
      000072 95               [ 1]  199 	ld	xh, a
      000073 A3 00 40         [ 2]  200 	cpw	x, #0x0040
      000076 26 05            [ 1]  201 	jrne	00106$
                                    202 ;	main.c: 55: smart_increment(&color->g);
      000078 1E 01            [ 2]  203 	ldw	x, (0x01, sp)
      00007A CDr00r00         [ 4]  204 	call	_smart_increment
      00007D                        205 00106$:
                                    206 ;	main.c: 58: if((1 << 5) == (~PC_IDR & (1 << 5))) { // But_G-
      00007D C6 50 0B         [ 1]  207 	ld	a, 0x500b
      000080 5F               [ 1]  208 	clrw	x
      000081 97               [ 1]  209 	ld	xl, a
      000082 53               [ 2]  210 	cplw	x
      000083 9F               [ 1]  211 	ld	a, xl
      000084 A4 20            [ 1]  212 	and	a, #0x20
      000086 97               [ 1]  213 	ld	xl, a
      000087 4F               [ 1]  214 	clr	a
      000088 95               [ 1]  215 	ld	xh, a
      000089 A3 00 20         [ 2]  216 	cpw	x, #0x0020
      00008C 26 05            [ 1]  217 	jrne	00108$
                                    218 ;	main.c: 59: smart_decrement(&color->g);
      00008E 1E 01            [ 2]  219 	ldw	x, (0x01, sp)
      000090 CDr00r00         [ 4]  220 	call	_smart_decrement
      000093                        221 00108$:
                                    222 ;	main.c: 62: if((1 << 4) == (~PC_IDR & (1 << 4))) { // But_B+
      000093 C6 50 0B         [ 1]  223 	ld	a, 0x500b
      000096 5F               [ 1]  224 	clrw	x
      000097 97               [ 1]  225 	ld	xl, a
      000098 53               [ 2]  226 	cplw	x
      000099 90 5F            [ 1]  227 	clrw	y
      00009B 9F               [ 1]  228 	ld	a, xl
      00009C A4 10            [ 1]  229 	and	a, #0x10
      00009E 90 97            [ 1]  230 	ld	yl, a
                                    231 ;	main.c: 63: smart_increment(&color->b);
      0000A0 1E 03            [ 2]  232 	ldw	x, (0x03, sp)
      0000A2 5C               [ 1]  233 	incw	x
      0000A3 5C               [ 1]  234 	incw	x
      0000A4 1F 01            [ 2]  235 	ldw	(0x01, sp), x
                                    236 ;	main.c: 62: if((1 << 4) == (~PC_IDR & (1 << 4))) { // But_B+
      0000A6 90 A3 00 10      [ 2]  237 	cpw	y, #0x0010
      0000AA 26 05            [ 1]  238 	jrne	00110$
                                    239 ;	main.c: 63: smart_increment(&color->b);
      0000AC 1E 01            [ 2]  240 	ldw	x, (0x01, sp)
      0000AE CDr00r00         [ 4]  241 	call	_smart_increment
      0000B1                        242 00110$:
                                    243 ;	main.c: 66: if((1 << 3) == (~PC_IDR & (1 << 3))) { // But_B-
      0000B1 C6 50 0B         [ 1]  244 	ld	a, 0x500b
      0000B4 5F               [ 1]  245 	clrw	x
      0000B5 97               [ 1]  246 	ld	xl, a
      0000B6 53               [ 2]  247 	cplw	x
      0000B7 9F               [ 1]  248 	ld	a, xl
      0000B8 A4 08            [ 1]  249 	and	a, #0x08
      0000BA 97               [ 1]  250 	ld	xl, a
      0000BB 4F               [ 1]  251 	clr	a
      0000BC 95               [ 1]  252 	ld	xh, a
      0000BD A3 00 08         [ 2]  253 	cpw	x, #0x0008
      0000C0 26 07            [ 1]  254 	jrne	00113$
                                    255 ;	main.c: 67: smart_decrement(&color->b);
      0000C2 1E 01            [ 2]  256 	ldw	x, (0x01, sp)
      0000C4 5B 04            [ 2]  257 	addw	sp, #4
      0000C6 CCr00r00         [ 2]  258 	jp	_smart_decrement
                                    259 ;	main.c: 73: if((1 << 5) == (~PB_IDR & (1 << 5))) { // But_LOAD
      0000C9                        260 00113$:
                                    261 ;	main.c: 75: }
      0000C9 5B 04            [ 2]  262 	addw	sp, #4
      0000CB 81               [ 4]  263 	ret
                                    264 	.area CODE
                                    265 	.area CONST
                                    266 	.area INITIALIZER
                                    267 	.area CABS (ABS)
