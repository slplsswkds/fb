                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _smart_decrement
                                     13 	.globl _smart_increment
                                     14 	.globl _write_color_to_registers
                                     15 	.globl _tim2_init
                                     16 	.globl _gpio_init
                                     17 	.globl _clk_init
                                     18 	.globl _button_hundler
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; Stack segment in internal ram
                                     29 ;--------------------------------------------------------
                                     30 	.area	SSEG
      000000                         31 __start__stack:
      000000                         32 	.ds	1
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; absolute external ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DABS (ABS)
                                     38 
                                     39 ; default segment ordering for linker
                                     40 	.area HOME
                                     41 	.area GSINIT
                                     42 	.area GSFINAL
                                     43 	.area CONST
                                     44 	.area INITIALIZER
                                     45 	.area CODE
                                     46 
                                     47 ;--------------------------------------------------------
                                     48 ; interrupt vector
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
      000000                         51 __interrupt_vect:
      000000 82v00u00u00             52 	int s_GSINIT ; reset
                                     53 ;--------------------------------------------------------
                                     54 ; global & static initialisations
                                     55 ;--------------------------------------------------------
                                     56 	.area HOME
                                     57 	.area GSINIT
                                     58 	.area GSFINAL
                                     59 	.area GSINIT
      000000                         60 __sdcc_init_data:
                                     61 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   62 	ldw x, #l_DATA
      000003 27 07            [ 1]   63 	jreq	00002$
      000005                         64 00001$:
      000005 72 4FuFFuFF      [ 1]   65 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   66 	decw x
      00000A 26 F9            [ 1]   67 	jrne	00001$
      00000C                         68 00002$:
      00000C AEr00r00         [ 2]   69 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   70 	jreq	00004$
      000011                         71 00003$:
      000011 D6uFFuFF         [ 1]   72 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   73 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   74 	decw	x
      000018 26 F7            [ 1]   75 	jrne	00003$
      00001A                         76 00004$:
                                     77 ; stm8_genXINIT() end
                                     78 	.area GSFINAL
      000000 CCr00r04         [ 2]   79 	jp	__sdcc_program_startup
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME
                                     84 	.area HOME
      000004                         85 __sdcc_program_startup:
      000004 CCr00r08         [ 2]   86 	jp	_main
                                     87 ;	return from main will return to caller
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CODE
                                     92 ;	main.c: 19: static void delay(uint16_t t) {
                                     93 ;	-----------------------------------------
                                     94 ;	 function delay
                                     95 ;	-----------------------------------------
      000000                         96 _delay:
                                     97 ;	main.c: 20: while(t--) {};
      000000                         98 00101$:
      000000 90 93            [ 1]   99 	ldw	y, x
      000002 5A               [ 2]  100 	decw	x
      000003 90 5D            [ 2]  101 	tnzw	y
      000005 26 F9            [ 1]  102 	jrne	00101$
                                    103 ;	main.c: 21: }
      000007 81               [ 4]  104 	ret
                                    105 ;	main.c: 23: int main() {
                                    106 ;	-----------------------------------------
                                    107 ;	 function main
                                    108 ;	-----------------------------------------
      000008                        109 _main:
      000008 52 03            [ 2]  110 	sub	sp, #3
                                    111 ;	main.c: 24: do { __asm sim __endasm; } while(0); // Disable interrupts
      00000A 9B               [ 1]  112 	sim	
                                    113 ;	main.c: 26: clk_init();
      00000B CDr00r00         [ 4]  114 	call	_clk_init
                                    115 ;	main.c: 27: gpio_init();
      00000E CDr00r00         [ 4]  116 	call	_gpio_init
                                    117 ;	main.c: 28: tim2_init();
      000011 CDr00r00         [ 4]  118 	call	_tim2_init
                                    119 ;	main.c: 30: do { __asm rim __endasm; } while(0); // Enable interrupts
      000014 9A               [ 1]  120 	rim	
                                    121 ;	main.c: 35: rgb.r = 0;
      000015 0F 01            [ 1]  122 	clr	(0x01, sp)
                                    123 ;	main.c: 36: rgb.g = 0;
      000017 0F 02            [ 1]  124 	clr	(0x02, sp)
                                    125 ;	main.c: 37: rgb.b = 0;
      000019 0F 03            [ 1]  126 	clr	(0x03, sp)
      00001B                        127 00108$:
                                    128 ;	main.c: 40: button_hundler(&rgb);
      00001B 96               [ 1]  129 	ldw	x, sp
      00001C 5C               [ 1]  130 	incw	x
      00001D CDr00r2A         [ 4]  131 	call	_button_hundler
                                    132 ;	main.c: 41: write_color_to_registers(&rgb);
      000020 96               [ 1]  133 	ldw	x, sp
      000021 5C               [ 1]  134 	incw	x
      000022 CDr00r00         [ 4]  135 	call	_write_color_to_registers
      000025 20 F4            [ 2]  136 	jra	00108$
                                    137 ;	main.c: 43: }
      000027 5B 03            [ 2]  138 	addw	sp, #3
      000029 81               [ 4]  139 	ret
                                    140 ;	main.c: 45: void button_hundler(struct Color *color) {
                                    141 ;	-----------------------------------------
                                    142 ;	 function button_hundler
                                    143 ;	-----------------------------------------
      00002A                        144 _button_hundler:
      00002A 52 04            [ 2]  145 	sub	sp, #4
      00002C 1F 03            [ 2]  146 	ldw	(0x03, sp), x
                                    147 ;	main.c: 46: if((1 << 2) == (~PD_IDR & (1 << 2))) { // But_R+
      00002E C6 50 10         [ 1]  148 	ld	a, 0x5010
      000031 5F               [ 1]  149 	clrw	x
      000032 97               [ 1]  150 	ld	xl, a
      000033 53               [ 2]  151 	cplw	x
      000034 9F               [ 1]  152 	ld	a, xl
      000035 A4 04            [ 1]  153 	and	a, #0x04
      000037 97               [ 1]  154 	ld	xl, a
      000038 4F               [ 1]  155 	clr	a
      000039 95               [ 1]  156 	ld	xh, a
      00003A A3 00 04         [ 2]  157 	cpw	x, #0x0004
      00003D 26 05            [ 1]  158 	jrne	00102$
                                    159 ;	main.c: 47: smart_increment(&color->r);
      00003F 1E 03            [ 2]  160 	ldw	x, (0x03, sp)
      000041 CDr00r00         [ 4]  161 	call	_smart_increment
      000044                        162 00102$:
                                    163 ;	main.c: 50: if((1 << 7) == (~PC_IDR & (1 << 7))) { // But_R-
      000044 C6 50 0B         [ 1]  164 	ld	a, 0x500b
      000047 5F               [ 1]  165 	clrw	x
      000048 97               [ 1]  166 	ld	xl, a
      000049 53               [ 2]  167 	cplw	x
      00004A 9F               [ 1]  168 	ld	a, xl
      00004B A4 80            [ 1]  169 	and	a, #0x80
      00004D 97               [ 1]  170 	ld	xl, a
      00004E 4F               [ 1]  171 	clr	a
      00004F 95               [ 1]  172 	ld	xh, a
      000050 A3 00 80         [ 2]  173 	cpw	x, #0x0080
      000053 26 05            [ 1]  174 	jrne	00104$
                                    175 ;	main.c: 51: smart_decrement(&color->r);
      000055 1E 03            [ 2]  176 	ldw	x, (0x03, sp)
      000057 CDr00r00         [ 4]  177 	call	_smart_decrement
      00005A                        178 00104$:
                                    179 ;	main.c: 54: if((1 << 6) == (~PC_IDR & (1 << 6))) { // But_G+
      00005A C6 50 0B         [ 1]  180 	ld	a, 0x500b
      00005D 5F               [ 1]  181 	clrw	x
      00005E 97               [ 1]  182 	ld	xl, a
      00005F 53               [ 2]  183 	cplw	x
      000060 9F               [ 1]  184 	ld	a, xl
      000061 A4 40            [ 1]  185 	and	a, #0x40
      000063 97               [ 1]  186 	ld	xl, a
      000064 4F               [ 1]  187 	clr	a
                                    188 ;	main.c: 55: smart_increment(&color->g);
      000065 16 03            [ 2]  189 	ldw	y, (0x03, sp)
      000067 90 5C            [ 1]  190 	incw	y
      000069 17 01            [ 2]  191 	ldw	(0x01, sp), y
                                    192 ;	main.c: 54: if((1 << 6) == (~PC_IDR & (1 << 6))) { // But_G+
      00006B 95               [ 1]  193 	ld	xh, a
      00006C A3 00 40         [ 2]  194 	cpw	x, #0x0040
      00006F 26 05            [ 1]  195 	jrne	00106$
                                    196 ;	main.c: 55: smart_increment(&color->g);
      000071 1E 01            [ 2]  197 	ldw	x, (0x01, sp)
      000073 CDr00r00         [ 4]  198 	call	_smart_increment
      000076                        199 00106$:
                                    200 ;	main.c: 58: if((1 << 5) == (~PC_IDR & (1 << 5))) { // But_G-
      000076 C6 50 0B         [ 1]  201 	ld	a, 0x500b
      000079 5F               [ 1]  202 	clrw	x
      00007A 97               [ 1]  203 	ld	xl, a
      00007B 53               [ 2]  204 	cplw	x
      00007C 9F               [ 1]  205 	ld	a, xl
      00007D A4 20            [ 1]  206 	and	a, #0x20
      00007F 97               [ 1]  207 	ld	xl, a
      000080 4F               [ 1]  208 	clr	a
      000081 95               [ 1]  209 	ld	xh, a
      000082 A3 00 20         [ 2]  210 	cpw	x, #0x0020
      000085 26 05            [ 1]  211 	jrne	00108$
                                    212 ;	main.c: 59: smart_decrement(&color->g);
      000087 1E 01            [ 2]  213 	ldw	x, (0x01, sp)
      000089 CDr00r00         [ 4]  214 	call	_smart_decrement
      00008C                        215 00108$:
                                    216 ;	main.c: 62: if((1 << 4) == (~PC_IDR & (1 << 4))) { // But_B+
      00008C C6 50 0B         [ 1]  217 	ld	a, 0x500b
      00008F 5F               [ 1]  218 	clrw	x
      000090 97               [ 1]  219 	ld	xl, a
      000091 53               [ 2]  220 	cplw	x
      000092 90 5F            [ 1]  221 	clrw	y
      000094 9F               [ 1]  222 	ld	a, xl
      000095 A4 10            [ 1]  223 	and	a, #0x10
      000097 90 97            [ 1]  224 	ld	yl, a
                                    225 ;	main.c: 63: smart_increment(&color->b);
      000099 1E 03            [ 2]  226 	ldw	x, (0x03, sp)
      00009B 5C               [ 1]  227 	incw	x
      00009C 5C               [ 1]  228 	incw	x
      00009D 1F 01            [ 2]  229 	ldw	(0x01, sp), x
                                    230 ;	main.c: 62: if((1 << 4) == (~PC_IDR & (1 << 4))) { // But_B+
      00009F 90 A3 00 10      [ 2]  231 	cpw	y, #0x0010
      0000A3 26 05            [ 1]  232 	jrne	00110$
                                    233 ;	main.c: 63: smart_increment(&color->b);
      0000A5 1E 01            [ 2]  234 	ldw	x, (0x01, sp)
      0000A7 CDr00r00         [ 4]  235 	call	_smart_increment
      0000AA                        236 00110$:
                                    237 ;	main.c: 66: if((1 << 3) == (~PC_IDR & (1 << 3))) { // But_B-
      0000AA C6 50 0B         [ 1]  238 	ld	a, 0x500b
      0000AD 5F               [ 1]  239 	clrw	x
      0000AE 97               [ 1]  240 	ld	xl, a
      0000AF 53               [ 2]  241 	cplw	x
      0000B0 9F               [ 1]  242 	ld	a, xl
      0000B1 A4 08            [ 1]  243 	and	a, #0x08
      0000B3 97               [ 1]  244 	ld	xl, a
      0000B4 4F               [ 1]  245 	clr	a
      0000B5 95               [ 1]  246 	ld	xh, a
      0000B6 A3 00 08         [ 2]  247 	cpw	x, #0x0008
      0000B9 26 07            [ 1]  248 	jrne	00113$
                                    249 ;	main.c: 67: smart_decrement(&color->b);
      0000BB 1E 01            [ 2]  250 	ldw	x, (0x01, sp)
      0000BD 5B 04            [ 2]  251 	addw	sp, #4
      0000BF CCr00r00         [ 2]  252 	jp	_smart_decrement
      0000C2                        253 00113$:
                                    254 ;	main.c: 70: }
      0000C2 5B 04            [ 2]  255 	addw	sp, #4
      0000C4 81               [ 4]  256 	ret
                                    257 	.area CODE
                                    258 	.area CONST
                                    259 	.area INITIALIZER
                                    260 	.area CABS (ABS)
