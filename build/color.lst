                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module color
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _eeprom_read
                                     12 	.globl _sqrtf
                                     13 	.globl _expf
                                     14 	.globl _normalize_from
                                     15 	.globl _write_color_to_registers
                                     16 	.globl _smart_increment
                                     17 	.globl _smart_decrement
                                     18 	.globl _load_color_from_eeprom
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DABS (ABS)
                                     31 
                                     32 ; default segment ordering for linker
                                     33 	.area HOME
                                     34 	.area GSINIT
                                     35 	.area GSFINAL
                                     36 	.area CONST
                                     37 	.area INITIALIZER
                                     38 	.area CODE
                                     39 
                                     40 ;--------------------------------------------------------
                                     41 ; global & static initialisations
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area GSINIT
                                     45 	.area GSFINAL
                                     46 	.area GSINIT
                                     47 ;--------------------------------------------------------
                                     48 ; Home
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
                                     51 	.area HOME
                                     52 ;--------------------------------------------------------
                                     53 ; code
                                     54 ;--------------------------------------------------------
                                     55 	.area CODE
                                     56 ;	./src/color.c: 3: uint16_t normalize_from(uint8_t *val) {
                                     57 ;	-----------------------------------------
                                     58 ;	 function normalize_from
                                     59 ;	-----------------------------------------
      000000                         60 _normalize_from:
                                     61 ;	./src/color.c: 4: float tmp1 = *val;
      000000 F6               [ 1]   62 	ld	a, (x)
      000001 CDr00r00         [ 4]   63 	call	___uchar2fs
                                     64 ;	./src/color.c: 5: float tmp2 = sqrtf(10 * tmp1) / 5;
      000004 89               [ 2]   65 	pushw	x
      000005 90 89            [ 2]   66 	pushw	y
      000007 5F               [ 1]   67 	clrw	x
      000008 89               [ 2]   68 	pushw	x
      000009 4B 20            [ 1]   69 	push	#0x20
      00000B 4B 41            [ 1]   70 	push	#0x41
      00000D CDr00r00         [ 4]   71 	call	___fsmul
      000010 89               [ 2]   72 	pushw	x
      000011 90 89            [ 2]   73 	pushw	y
      000013 CDr00r00         [ 4]   74 	call	_sqrtf
      000016 4B 00            [ 1]   75 	push	#0x00
      000018 4B 00            [ 1]   76 	push	#0x00
      00001A 4B A0            [ 1]   77 	push	#0xa0
      00001C 4B 40            [ 1]   78 	push	#0x40
      00001E 89               [ 2]   79 	pushw	x
      00001F 90 89            [ 2]   80 	pushw	y
      000021 CDr00r00         [ 4]   81 	call	___fsdiv
                                     82 ;	./src/color.c: 6: return (expf(tmp2));
      000024 89               [ 2]   83 	pushw	x
      000025 90 89            [ 2]   84 	pushw	y
      000027 CDr00r00         [ 4]   85 	call	_expf
      00002A 89               [ 2]   86 	pushw	x
      00002B 90 89            [ 2]   87 	pushw	y
      00002D CDr00r00         [ 4]   88 	call	___fs2uint
                                     89 ;	./src/color.c: 7: }
      000030 81               [ 4]   90 	ret
                                     91 ;	./src/color.c: 10: void write_color_to_registers(struct Color *color) {
                                     92 ;	-----------------------------------------
                                     93 ;	 function write_color_to_registers
                                     94 ;	-----------------------------------------
      000031                         95 _write_color_to_registers:
      000031 52 06            [ 2]   96 	sub	sp, #6
                                     97 ;	./src/color.c: 11: uint16_t red = normalize_from( &color->r );
      000033 1F 05            [ 2]   98 	ldw	(0x05, sp), x
      000035 CDr00r00         [ 4]   99 	call	_normalize_from
      000038 1F 01            [ 2]  100 	ldw	(0x01, sp), x
                                    101 ;	./src/color.c: 12: uint16_t green = normalize_from( &color->g );
      00003A 1E 05            [ 2]  102 	ldw	x, (0x05, sp)
      00003C 5C               [ 1]  103 	incw	x
      00003D CDr00r00         [ 4]  104 	call	_normalize_from
      000040 1F 03            [ 2]  105 	ldw	(0x03, sp), x
                                    106 ;	./src/color.c: 13: uint16_t blue = normalize_from( &color->b );
      000042 1E 05            [ 2]  107 	ldw	x, (0x05, sp)
      000044 5C               [ 1]  108 	incw	x
      000045 5C               [ 1]  109 	incw	x
      000046 CDr00r00         [ 4]  110 	call	_normalize_from
                                    111 ;	./src/color.c: 15: TIM2_CCR1H = red >> 8;
      000049 7B 01            [ 1]  112 	ld	a, (0x01, sp)
      00004B C7 53 11         [ 1]  113 	ld	0x5311, a
                                    114 ;	./src/color.c: 16: TIM2_CCR1L = red;
      00004E 7B 02            [ 1]  115 	ld	a, (0x02, sp)
      000050 C7 53 12         [ 1]  116 	ld	0x5312, a
                                    117 ;	./src/color.c: 18: TIM2_CCR2H = green >> 8;
      000053 7B 03            [ 1]  118 	ld	a, (0x03, sp)
      000055 C7 53 13         [ 1]  119 	ld	0x5313, a
                                    120 ;	./src/color.c: 19: TIM2_CCR2L = green;
      000058 7B 04            [ 1]  121 	ld	a, (0x04, sp)
      00005A C7 53 14         [ 1]  122 	ld	0x5314, a
                                    123 ;	./src/color.c: 21: TIM2_CCR3H = blue >> 8;
      00005D 9E               [ 1]  124 	ld	a, xh
      00005E C7 53 15         [ 1]  125 	ld	0x5315, a
                                    126 ;	./src/color.c: 22: TIM2_CCR3L = blue;
      000061 9F               [ 1]  127 	ld	a, xl
      000062 C7 53 16         [ 1]  128 	ld	0x5316, a
                                    129 ;	./src/color.c: 23: }
      000065 5B 06            [ 2]  130 	addw	sp, #6
      000067 81               [ 4]  131 	ret
                                    132 ;	./src/color.c: 25: void smart_increment(uint8_t *val) {
                                    133 ;	-----------------------------------------
                                    134 ;	 function smart_increment
                                    135 ;	-----------------------------------------
      000068                        136 _smart_increment:
                                    137 ;	./src/color.c: 26: if(*val < 255) {
      000068 F6               [ 1]  138 	ld	a, (x)
      000069 A1 FF            [ 1]  139 	cp	a, #0xff
      00006B 25 01            [ 1]  140 	jrc	00110$
      00006D 81               [ 4]  141 	ret
      00006E                        142 00110$:
                                    143 ;	./src/color.c: 27: *val += 1;
      00006E 4C               [ 1]  144 	inc	a
      00006F F7               [ 1]  145 	ld	(x), a
                                    146 ;	./src/color.c: 29: }
      000070 81               [ 4]  147 	ret
                                    148 ;	./src/color.c: 31: void smart_decrement(uint8_t *val) {
                                    149 ;	-----------------------------------------
                                    150 ;	 function smart_decrement
                                    151 ;	-----------------------------------------
      000071                        152 _smart_decrement:
                                    153 ;	./src/color.c: 32: if(*val > 0) {
      000071 F6               [ 1]  154 	ld	a, (x)
      000072 26 01            [ 1]  155 	jrne	00110$
      000074 81               [ 4]  156 	ret
      000075                        157 00110$:
                                    158 ;	./src/color.c: 33: *val -= 1;
      000075 4A               [ 1]  159 	dec	a
      000076 F7               [ 1]  160 	ld	(x), a
                                    161 ;	./src/color.c: 35: }
      000077 81               [ 4]  162 	ret
                                    163 ;	./src/color.c: 37: void load_color_from_eeprom(struct Color *color, uint8_t color_cell) {
                                    164 ;	-----------------------------------------
                                    165 ;	 function load_color_from_eeprom
                                    166 ;	-----------------------------------------
      000078                        167 _load_color_from_eeprom:
      000078 52 07            [ 2]  168 	sub	sp, #7
      00007A 1F 06            [ 2]  169 	ldw	(0x06, sp), x
                                    170 ;	./src/color.c: 39: eeprom_read(3*color_cell+0, &r);
      00007C 5F               [ 1]  171 	clrw	x
      00007D 97               [ 1]  172 	ld	xl, a
      00007E 89               [ 2]  173 	pushw	x
      00007F 58               [ 2]  174 	sllw	x
      000080 72 FB 01         [ 2]  175 	addw	x, (1, sp)
      000083 5B 02            [ 2]  176 	addw	sp, #2
      000085 1F 04            [ 2]  177 	ldw	(0x04, sp), x
      000087 90 93            [ 1]  178 	ldw	y, x
      000089 96               [ 1]  179 	ldw	x, sp
      00008A 5C               [ 1]  180 	incw	x
      00008B 89               [ 2]  181 	pushw	x
      00008C 93               [ 1]  182 	ldw	x, y
      00008D CDr00r00         [ 4]  183 	call	_eeprom_read
                                    184 ;	./src/color.c: 40: eeprom_read(3*color_cell+1, &g);
      000090 96               [ 1]  185 	ldw	x, sp
      000091 5C               [ 1]  186 	incw	x
      000092 5C               [ 1]  187 	incw	x
      000093 51               [ 1]  188 	exgw	x, y
      000094 1E 04            [ 2]  189 	ldw	x, (0x04, sp)
      000096 5C               [ 1]  190 	incw	x
      000097 90 89            [ 2]  191 	pushw	y
      000099 CDr00r00         [ 4]  192 	call	_eeprom_read
                                    193 ;	./src/color.c: 41: eeprom_read(3*color_cell+2, &b);
      00009C 96               [ 1]  194 	ldw	x, sp
      00009D 1C 00 03         [ 2]  195 	addw	x, #3
      0000A0 16 04            [ 2]  196 	ldw	y, (0x04, sp)
      0000A2 72 A9 00 02      [ 2]  197 	addw	y, #0x0002
      0000A6 89               [ 2]  198 	pushw	x
      0000A7 93               [ 1]  199 	ldw	x, y
      0000A8 CDr00r00         [ 4]  200 	call	_eeprom_read
                                    201 ;	./src/color.c: 43: color->r = r;
      0000AB 1E 06            [ 2]  202 	ldw	x, (0x06, sp)
      0000AD 7B 01            [ 1]  203 	ld	a, (0x01, sp)
      0000AF F7               [ 1]  204 	ld	(x), a
                                    205 ;	./src/color.c: 44: color->g = g;
      0000B0 1E 06            [ 2]  206 	ldw	x, (0x06, sp)
      0000B2 5C               [ 1]  207 	incw	x
      0000B3 7B 02            [ 1]  208 	ld	a, (0x02, sp)
      0000B5 F7               [ 1]  209 	ld	(x), a
                                    210 ;	./src/color.c: 45: color->b = b;
      0000B6 1E 06            [ 2]  211 	ldw	x, (0x06, sp)
      0000B8 5C               [ 1]  212 	incw	x
      0000B9 5C               [ 1]  213 	incw	x
      0000BA 7B 03            [ 1]  214 	ld	a, (0x03, sp)
      0000BC F7               [ 1]  215 	ld	(x), a
                                    216 ;	./src/color.c: 46: }
      0000BD 5B 07            [ 2]  217 	addw	sp, #7
      0000BF 81               [ 4]  218 	ret
                                    219 	.area CODE
                                    220 	.area CONST
                                    221 	.area INITIALIZER
                                    222 	.area CABS (ABS)
